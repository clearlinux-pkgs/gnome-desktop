diff --git a/libgnome-desktop/gnome-languages.c b/libgnome-desktop/gnome-languages.c
index 7a0ef6b..eb7195c 100644
--- a/libgnome-desktop/gnome-languages.c
+++ b/libgnome-desktop/gnome-languages.c
@@ -76,7 +76,7 @@ static char * construct_language_name (const char *language,
 
 static gboolean language_name_is_valid (const char *language_name);
 
-static void
+void
 gnome_locale_free (GnomeLocale *locale)
 {
         if (locale == NULL) {
@@ -92,7 +92,7 @@ gnome_locale_free (GnomeLocale *locale)
         g_free (locale);
 }
 
-static char *
+char *
 normalize_codeset (const char *codeset)
 {
         if (codeset == NULL)
@@ -224,7 +224,7 @@ gnome_parse_locale (const char *locale,
         return retval;
 }
 
-static char *
+char *
 construct_language_name (const char *language,
                          const char *territory,
                          const char *codeset,
@@ -288,7 +288,7 @@ gnome_normalize_locale (const char *locale)
         return normalized_name;
 }
 
-static gboolean
+gboolean
 language_name_is_valid (const char *language_name)
 {
         locale_t locale;
@@ -305,7 +305,7 @@ language_name_is_valid (const char *language_name)
         return FALSE;
 }
 
-static void
+void
 language_name_get_codeset_details (const char  *language_name,
                                    char       **pcodeset,
                                    gboolean    *is_utf8)
@@ -381,7 +381,7 @@ gnome_language_has_translations (const char *code)
         return has_translations;
 }
 
-static gboolean
+gboolean
 add_locale (const char *language_name,
             gboolean    utf8_only)
 {
@@ -464,7 +464,7 @@ add_locale (const char *language_name,
         return TRUE;
 }
 
-static int
+int
 select_dirs (const struct dirent *dirent)
 {
         int result = 0;
@@ -493,7 +493,7 @@ select_dirs (const struct dirent *dirent)
         return result;
 }
 
-static gboolean
+gboolean
 collect_locales_from_directory (void)
 {
         gboolean found_locales = FALSE;
@@ -514,7 +514,7 @@ collect_locales_from_directory (void)
         return found_locales;
 }
 
-static gboolean
+gboolean
 collect_locales_from_localebin (void)
 {
         gboolean found_locales = FALSE;
@@ -543,7 +543,7 @@ collect_locales_from_localebin (void)
         return found_locales;
 }
 
-static void
+void
 count_languages_and_territories (void)
 {
 	gpointer value;
@@ -576,7 +576,7 @@ count_languages_and_territories (void)
         }
 }
 
-static void
+void
 collect_locales (void)
 {
         gboolean found_localebin_locales = FALSE;
@@ -599,7 +599,7 @@ collect_locales (void)
 	count_languages_and_territories ();
 }
 
-static gint
+gint
 get_language_count (const char *language)
 {
         if (gnome_language_count_map == NULL) {
@@ -609,13 +609,13 @@ get_language_count (const char *language)
 	return GPOINTER_TO_INT (g_hash_table_lookup (gnome_language_count_map, language));
 }
 
-static gboolean
+gboolean
 is_unique_language (const char *language)
 {
         return get_language_count (language) == 1;
 }
 
-static gint
+gint
 get_territory_count (const char *territory)
 {
         if (gnome_territory_count_map == NULL) {
@@ -625,13 +625,13 @@ get_territory_count (const char *territory)
 	return GPOINTER_TO_INT (g_hash_table_lookup (gnome_territory_count_map, territory));
 }
 
-static gboolean
+gboolean
 is_unique_territory (const char *territory)
 {
         return get_territory_count (territory) == 1;
 }
 
-static gboolean
+gboolean
 is_fallback_language (const char *code)
 {
         const char *fallback_language_names[] = { "C", "POSIX", NULL };
@@ -646,7 +646,7 @@ is_fallback_language (const char *code)
         return FALSE;
 }
 
-static const char *
+const char *
 get_language (const char *code)
 {
         const char *name;
@@ -668,7 +668,7 @@ get_language (const char *code)
         return name;
 }
 
-static char *
+char *
 get_first_item_in_semicolon_list (const char *list)
 {
         char **items;
@@ -686,7 +686,7 @@ get_first_item_in_semicolon_list (const char *list)
         return item;
 }
 
-static char *
+char *
 capitalize_utf8_string (const char *str)
 {
         char first[8] = { 0 };
@@ -699,7 +699,7 @@ capitalize_utf8_string (const char *str)
         return g_strconcat (first, g_utf8_offset_to_pointer (str, 1), NULL);
 }
 
-static char *
+char *
 get_translated_language (const char *code,
                          const char *locale)
 {
@@ -739,7 +739,7 @@ get_translated_language (const char *code,
         return name;
 }
 
-static const char *
+const char *
 get_territory (const char *code)
 {
         const char *name;
@@ -757,7 +757,7 @@ get_territory (const char *code)
         return name;
 }
 
-static char *
+char *
 get_translated_territory (const char *code,
                           const char *locale)
 {
@@ -789,7 +789,7 @@ get_translated_territory (const char *code,
         return name;
 }
 
-static void
+void
 languages_parse_start_tag (GMarkupParseContext      *ctx,
                            const char               *element_name,
                            const char              **attr_names,
@@ -893,7 +893,7 @@ languages_parse_start_tag (GMarkupParseContext      *ctx,
         }
 }
 
-static void
+void
 territories_parse_start_tag (GMarkupParseContext      *ctx,
                              const char               *element_name,
                              const char              **attr_names,
@@ -980,7 +980,7 @@ territories_parse_start_tag (GMarkupParseContext      *ctx,
         }
 }
 
-static void
+void
 languages_variant_init (const char *variant)
 {
         gboolean res;
@@ -1019,7 +1019,7 @@ languages_variant_init (const char *variant)
         }
 }
 
-static void
+void
 languages_init (void)
 {
         if (gnome_languages_map)
@@ -1034,7 +1034,7 @@ languages_init (void)
         languages_variant_init ("iso_639_3");
 }
 
-static void
+void
 territories_init (void)
 {
         gboolean res;
